generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Account {
  id          String    @id @default(uuid())
  email       String    @unique
  cellphone   String    @unique
  password    String
  verified_at DateTime?

  created_at DateTime  @default(now())
  updated_at DateTime?

  person       Person?
  sessions     Session[]
  agribusiness Agribusiness?
  orders       Order[]

  @@map("accounts")
}

model Person {
  id         String @id @default(uuid())
  first_name String
  last_name  String
  cpf        String @unique

  account_id String  @unique
  account    Account @relation(fields: [account_id], references: [id], onDelete: Cascade)

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("people")
}

model Session {
  id         String @id @default(uuid())
  ip_address String
  user_agent String

  account_id String
  account    Account @relation(fields: [account_id], references: [id], onDelete: Cascade)

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("sessions")
}

model Agribusiness {
  id   String @id @default(uuid())
  name String
  caf  String @unique
  active Boolean @default(true)

  admin_id String  @unique
  admin    Account @relation(fields: [admin_id], references: [id], onDelete: Cascade)

  created_at DateTime  @default(now())
  updated_at DateTime?

  offers Offer[]

  @@map("agribusinesses")
}

model ProductType {
  id   String @id @default(uuid())
  name String @unique

  created_at DateTime  @default(now())
  updated_at DateTime?

  products Product[]

  @@map("products_types")
}

enum PRICING {
  UNIT
  WEIGHT
}

model Product {
  id      String  @id @default(uuid())
  name    String  @unique
  image   String
  pricing PRICING

  type_id String
  type    ProductType @relation(fields: [type_id], references: [id], onDelete: Cascade)

  created_at DateTime  @default(now())
  updated_at DateTime?

  offers OfferProduct[]
  orders OrderProduct[]

  @@map("products")
}

enum OFFER_STATUS {
  AVAILABLE
  ON_HOLD
}

model Offer {
  id     String       @id @default(uuid())
  status OFFER_STATUS

  agribusiness_id String
  agribusiness    Agribusiness @relation(fields: [agribusiness_id], references: [id], onDelete: Cascade)

  created_at DateTime  @default(now())
  updated_at DateTime?

  items OfferProduct[]

  @@map("offers")
}

model OfferProduct {
  id                 String  @id @default(uuid())
  price              Decimal @db.Decimal(10, 2)
  quantity_or_weight Decimal @db.Decimal(10, 2)

  offer_id String
  offer    Offer  @relation(fields: [offer_id], references: [id], onDelete: Cascade)

  product_id String
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  created_at   DateTime       @default(now())
  updated_at   DateTime?
  OrderProduct OrderProduct[]

  @@map("offers_products")
}

enum ORDER_STATUS {
  READY
  ON_HOLD
  DISPATCHED
  PENDING
  CANCELED
}

model Order {
  id               String       @id @default(uuid())
  shipping_address String
  payment_method   String
  status           ORDER_STATUS

  customer_id String
  customer    Account @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  created_at DateTime  @default(now())
  updated_at DateTime?

  items OrderProduct[]

  @@map("orders")
}

model OrderProduct {
  id                 String  @id @default(uuid())
  quantity_or_weight Decimal @db.Decimal(10, 2)

  order_id String
  order    Order  @relation(fields: [order_id], references: [id], onDelete: Cascade)

  offer_product_id String
  offer            OfferProduct @relation(fields: [offer_product_id], references: [id], onDelete: Cascade)

  product_id String
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("orders_products")
}
